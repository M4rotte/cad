#!/usr/bin/env bash

# Check if we have all that we need, else exit 99.
TOOLS='snmpdf snmpget ping awk getent tr basename bc host'
for tool in $TOOLS; do
    [ -x "$(which $tool)" ] || { echo -e "\n$tool not found. Exiting.\n"; exit 99; }
done

# Set some default parameters
FS_WARNTHRESHOLD=96         # Warning threshold, used space in percent
FS_CRITTHRESHOLD=98         # Critical threshold, used space in percent
FS_EXCLUSIONS='^/proc ^/sys/? ^/run/?' # FS Exclusions

FILE_TEMPLATING='./templating'
FILE_LOG='./cad.log'
FILE_TMP="/tmp/cad-$$.tmp"
DIR_TMP="/tmp/cad-$$"
VERBOSE='false'

CAD_SNMP_COMMUNITY='public'
CAD_SNMP_VERSION='1'

POLLER_NAME='Poller1'

# Show help
show_help() {
cat <<EOF

Usage: $0 [-h] [-v] [-H <network>] [-F] [-c <SNMP community>]

    -h                 Show this help and exit
    -v                 Be verbose
    -H <network>       Generate CLAPI file for hosts in this network (hosts addition)
    -U <network>       Generate CLAPI file for hosts in this network (hosts update)
    -F                 Add CLAPI for filesystems for every hosts
    -A <network>       Generate all. Equivalent to: -H <network> -F
    -c <community>     SNMP Community. Used for SNMP requests and enforced on created hosts
    -V <version>       SNMP Version (default: 1)
    -p <poller name>   The name of the poller which the created/updated hosts will be linked
    -W <percent>       The warning threshold in percent used
    -C <percent>       The critical threshold in percent used



EOF
}

SNMPGET="snmpget -v$CAD_SNMP_VERSION -c$CAD_SNMP_COMMUNITY"
SNMPWALK="snmpwalk -Oqv -v1 -cpublic"



get_sysdescr() {
    $SNMPGET -Oqv "$1" 1.3.6.1.2.1.1.1.0 2>/dev/null | tr -d '"'
}

get_filesystems() {
paste <($SNMPWALK "$1" 1.3.6.1.2.1.25.3.8.1.2) \
      <($SNMPWALK "$1" 1.3.6.1.2.1.25.2.3.1.5) \
      <($SNMPWALK "$1" 1.3.6.1.2.1.25.2.3.1.4 |awk '{print $1}') \
       |awk '{print $1 " " $2*$3}' |grep '^"/'
}

get_fqdn() {
    getent hosts $1 |awk '{print $2}' 
}

clapi_add_fs() {
    fs_mount_point="$(echo "$2" |tr -d '"')"
    for re in $FS_EXCLUSIONS; do
        [[ "$fs_mount_point" =~ $re ]] && {
                $VERBOSE && echo "Excluding FS \"$2\" for host $FQDN" >&2
                return 0
            }
    done
    
    echo "SERVICE;ADD;$1;UNIX_FILESYSTEM_${fs_mount_point}_USED;$FSTPL" >> "${DIR_TMP}/${FQDN}.clapi"
    echo "SERVICE;setmacro;$1;UNIX_FILESYSTEM_${fs_mount_point}_USED;FS;$fs_mount_point;0;Mount point" >> "${DIR_TMP}/${FQDN}.clapi"
    echo "SERVICE;setparam;$1;UNIX_FILESYSTEM_${fs_mount_point}_USED;check_command_arguments;!${FS_WARNTHRESHOLD}!${FS_CRITTHRESHOLD}" >> "${DIR_TMP}/${FQDN}.clapi"
}


gen_filesystems() {
    while IFS='\n' read fs; do
        while read mp size; do
            $VERBOSE && echo "$centreon_name:$FSTPL:$mp|$size"
            clapi_add_fs $real_centreon_name $mp $size
        done < <(echo "$fs")
    done < <(echo "$(get_filesystems $1)")
}


get_templating() {
    while IFS='\n' read template; do
        while IFS=';' read regex htpls hgs stpl; do
            [[ "$1" =~ $regex ]] && { echo $htpls $hgs $stpl; return 0; }
        done < <(echo "$template")
    done < <(grep -vE '^$|^\s*#' "$FILE_TEMPLATING")
}

clapi_add_host() {
    centreon_name=$(echo $2 |cut -d'.' -f1 |tr [a-z] [A-Z])
    ip_address=$(getent hosts $2 | awk '{print $1}')
    echo "HOST;ADD;$1;$centreon_name ($2);${ip_address};$3;$POLLER_NAME;$4"
    echo "HOST;setparam;$1;snmp_community;$CAD_SNMP_COMMUNITY"
}

clapi_up_host() {
    echo "HOST;setparam;$1;address;$1"
    echo "HOST;setparam;$1;snmp_community;$CAD_SNMP_COMMUNITY"
    echo "HOST;sethostgroup;$1;$4"
    echo "HOST;settemplate;$1;$3"
}


read_templating() {
    SYSDESCR="$(get_sysdescr $1)"
    $VERBOSE && echo "$FQDN: Description=$SYSDESCR" >&2
    templating="$(get_templating "$SYSDESCR")"
    read HTPL HG FSTPL < <(echo "$templating")
    $VERBOSE && echo "Template(s) for $FQDN: $HTPL" >&2
    $VERBOSE && echo "Group(s) for $FQDN: $HG" >&2
    $VERBOSE && echo "FS template for $FQDN: $FSTPL" >&2
}

add_host() {
    $VERBOSE && echo "Scanning address $1…" >&2
    ping -n -c1 $1 &>/dev/null && FQDN=$(get_fqdn $1) || { $VERBOSE && echo "Address $1 is down…" >&2; }
    real_centreon_name=$(echo $1 | tr [a-z] [A-Z])
    [ "$FQDN" ] && {
        echo "Adding host $real_centreon_name ($FQDN)…" >&2
        read_templating $1
        clapi_add_host $real_centreon_name $FQDN $HTPL $HG > "${DIR_TMP}/${FQDN}.clapi"
        [ $FSTPL ] && $GEN_FS && gen_filesystems $real_centreon_name $FSTPL || { $VERBOSE && echo "Host $FQDN has no FS service template associated…" >&2; }
    }
}

up_host() {
    $VERBOSE && echo "Scanning address $1…" >&2
    ping -4 -n -c1 $1 &>/dev/null && FQDN=$(get_fqdn $1) || { $VERBOSE && echo "Address $1 is down…" >&2; }
    [ "$FQDN" ] && {
        echo "Updating host $1 ($FQDN)…" >&2
        read_templating $1
        clapi_up_host $1 $FQDN $HTPL $HG > "${DIR_TMP}/${FQDN}.clapi"
        [ $FSTPL ] && $GEN_FS && gen_filesystems $1 $FSTPL
    }
}

gen_hosts() {
    for address in $(eval echo ${1//\*/{0..255\}}); do
        add_host $address
    done
}

up_hosts() {
    for address in $(eval echo ${1//\*/{0..255\}}); do
        up_host $address
    done
}


[ -d "$DIR_TMP" ] || mkdir "$DIR_TMP"

GEN_HOSTS='false'
UP_HOSTS='false'
GEN_FS='false'

while getopts "hvFH:U:A:f:p:W:C:c:V:" opt; do
    case $opt in
        h)
            show_help
            exit 0
        ;;
        v)
            VERBOSE='true'
        ;;
        c)
            CAD_SNMP_COMMUNITY="$OPTARG"
        ;;
        V)
            CAD_SNMP_VERSION="$OPTARG"
        ;;     
        W)
            FS_WARNTHRESHOLD="$OPTARG"
        ;;
        C)
            FS_CRITTHRESHOLD="$OPTARG"
        ;;
        f)
            FILE_TEMPLATING="$OPTARG"
        ;;
        p)
            POLLER_NAME="$OPTARG"
        ;;
        F)
            GEN_FS='true'
        ;;
        H)
            GEN_HOSTS='true'
            ARGS="$OPTARG"
        ;;
        U)
            UP_HOSTS='true'
            ARGS="$OPTARG"
        ;;
        A)
            GEN_HOSTS='true'
            GEN_FS='true'
            ARGS="$OPTARG"
        ;;
    esac
done

$VERBOSE && echo "VERBOSE=$VERBOSE" >&2
$VERBOSE && echo "GEN_FS=$GEN_FS" >&2
$VERBOSE && echo "SNMP Community=$CAD_SNMP_COMMUNITY" >&2
$VERBOSE && echo "SNMP Version=$CAD_SNMP_VERSION" >&2

[ -f "$FILE_TEMPLATING" ] || { echo -e "File \"$FILE_TEMPLATING\" not found. Exiting.\n"; exit 98; }

if $GEN_HOSTS; then
    `gen_hosts $ARGS` &
elif $UP_HOSTS; then
    `up_hosts $ARGS` &
fi

wait

cat "${DIR_TMP}"/* 2>/dev/null


[ -d "$DIR_TMP" ]  && rm -rf  "$DIR_TMP"
[ -f "$FILE_TMP" ] && rm "$FILE_TMP"
exit 0
