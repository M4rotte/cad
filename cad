#!/usr/bin/env bash

# Check if we have all that we need, else exit 99.
TOOLS='snmpdf snmpget ping awk getent tr'
for tool in $TOOLS; do
    [ -x "$(which $tool)" ] || { echo -e "\n$tool not found. Exiting.\n"; exit 99; }
done

# Set some default parameters
FS_WARNTHRESHOLD=5         # Warning threshold, free space in percent
FS_CRITTHRESHOLD=3         # Critical threshold, free space in percent
FS_MAXWARNTHRESHOLD=512    # Maximum threshold for warning, free space in MiB
FS_MAXCRITTHRESHOLD=1024   # Maximum threshold for critical, free space in MiB

FILE_TEMPLATING='./templating'
FILE_LOG='./cad.log'
FILE_TMP="/tmp/cad-$$.tmp"
DIR_TMP='/tmp/cad-$$'
VERBOSE='false'

SNMP_COMMUNITY='public'
SNMP_VERSION='2c'

POLLER_NAME='Poller1'

# Show help
show_help() {
cat <<EOF

Usage: $0 [-h] [-v] [-H <network>] [-F]

    -h               Show this help and exit
    -v               Be verbose
    -H <network>     Generate CLAPI file for hosts in this network (hosts addition)
    -F               Add CLAPI for filesystems for every hosts
    -A <network>     Generate all. Equivalent to: -H <network> -F

EOF
}

SNMPGET="snmpget -v$SNMP_VERSION -c$SNMP_COMMUNITY"

get_sysdescr() {
    $SNMPGET -Oqv "$1" 1.3.6.1.2.1.1.1.0 2>/dev/null | tr -d '"'
}

get_fqdn() {
    getent hosts $1 |awk '{print $2}'
}

get_templating() {
    while IFS='\n' read template; do
        while IFS=';' read regex htpls hgs stpl; do
            [[ "$1" =~ $regex ]] && { echo $htpls $hgs $stpl; return 0; }
        done < <(echo $template)
    done < <(grep -vE '^$|^\s*#' "$FILE_TEMPLATING")
}

clapi_add_host() {
    echo "HOST:ADD:$2:$2:$1:$3:$POLLER_NAME:$4"
}

add_host() {
    $VERBOSE && echo "Scanning address $1…" >&2
    ping -4 -n -c1 $1 &>/dev/null && FQDN=$(get_fqdn $1) || { $VERBOSE && echo "Address $1 is down…" >&2; }
    [ "$FQDN" ] && {
        echo "Adding host $FQDN…" >&2
        SYSDESCR="$(get_sysdescr $1)"
        templating="$(get_templating $SYSDESCR)"
        read HTPL HG < <(echo $templating)
        $VERBOSE && echo "Template(s) for $FQDN: $HTPL" >&2
        $VERBOSE && echo "Group(s) for $FQDN: $HG" >&2
        clapi_add_host $1 $FQDN $HTPL $HG > "${DIR_TMP}/${FQDN}.clapi"
    }
}

gen_hosts() {
    for address in $(eval echo ${1//\*/{0..255\}}); do
        add_host $address &
    done
}

gen_filesystems() {
    echo "Plop"
}

[ -d "$DIR_TMP" ] || mkdir "$DIR_TMP"

GEN_HOSTS='false'
GEN_FS='false'

while getopts "hvFH:U:A:f:p:" opt; do
    case $opt in
        h)
            show_help
            exit 0
        ;;
        v)
            VERBOSE='true'
        ;;
        f)
            FILE_TEMPLATING="$OPTARG"
        ;;
        p)
            POLLER_NAME="$OPTARG"
        ;;
        F)
            GEN_FS='true'
        ;;
        H)
            GEN_HOSTS='true'
            ARGS="$OPTARG"
        ;;
        A)
            GEN_HOSTS='true'
            GEN_FS='true'
            ARGS="$OPTARG"
        ;;
    esac
done

$VERBOSE && echo "VERBOSE=$VERBOSE" >&2

[ -f "$FILE_TEMPLATING" ] || { echo -e "File \"$FILE_TEMPLATING\" not found. Exiting.\n"; exit 98; }
[ "$GEN_FS" = 'true' -a "$GEN_HOSTS" = 'false' ] && { echo -e "\nOption -H is mandatory when using the -F option.\n"; show_help; exit 97; }

$GEN_HOSTS && gen_hosts $ARGS
wait
$GEN_FS && gen_filesystems $ARGS
wait
cat "${DIR_TMP}"/*


[ -d "$DIR_TMP" ]  && rm -rf  "$DIR_TMP"
[ -f "$FILE_TMP" ] && rm "$FILE_TMP"
exit 0
