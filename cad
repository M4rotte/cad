#!/usr/bin/env bash

# Check if we have all that we need, else exit 99.
TOOLS='snmpdf snmpget ping awk getent tr basename bc'
for tool in $TOOLS; do
    [ -x "$(which $tool)" ] || { echo -e "\n$tool not found. Exiting.\n"; exit 99; }
done

# Set some default parameters
FS_WARNTHRESHOLD=5         # Warning threshold, free space in percent
FS_CRITTHRESHOLD=3         # Critical threshold, free space in percent
FS_MAXWARNTHRESHOLD=512    # Maximum threshold for warning, free space in MiB
FS_MAXCRITTHRESHOLD=1024   # Maximum threshold for critical, free space in MiB
FS_EXCLUSIONS='^/dev/? ^/proc ^/sys/? ^/run/?' # FS Exclusions

FILE_TEMPLATING='./templating'
FILE_LOG='./cad.log' # Unused so far
FILE_TMP="/tmp/cad-$$.tmp"
DIR_TMP="/tmp/cad-$$"
VERBOSE='false'

SNMP_COMMUNITY='public'
SNMP_VERSION='2c'

POLLER_NAME='Poller1'

# Show help
show_help() {
cat <<EOF

Usage: $0 [-h] [-v] [-H|-A|-U <network>] [-F] [-c <SNMP community>] [-p <poller name>] [-W <warning threshold>] [-C <critical threshold>] [-t <max warning threshold>] [-T <max critical threshold>] [-X <regex list>]

    -h                 Show this help and exit
    -v                 Be verbose
    -H <network>       Generate CLAPI file for hosts in this network (hosts addition)
    -U <network>       Generate CLAPI file for hosts in this network (hosts update)
    -F                 Add CLAPI for filesystems for every hosts
    -A <network>       Generate all. Equivalent to: -H <network> -F
    -c <community>     SNMP Community. Used for SNMP requests and enforced on created hosts
    -p <poller name>   The name of the poller which the created/updated hosts will be linked
    -W <percent>       The warning threshold in percent free (will be converted to kB free according to FS size and capped to $FS_MAXWARNTHRESHOLD*1024 (you can use -t option to change this maximum)
    -C <percent>       The critical threshold in percent free (will be converted to kB free according to FS size and capped to $FS_MAXCRITTHRESHOLD*1024 (you can use -T option to change this maximum)
    -t <percent>       Max warning threshold in MB free
    -T <percent>       Max critical threshold in MB free
    -X <regex list>    List of space separated regex. Default is '^/dev/? ^/proc ^/sys/? ^/run/?'

    This script does NOT handle mountpoints with a space in their name. It could lead to strange (and falsy) behaviour. For AIX hosts, this is not the mount point, but the device name, that is returned. It has to be taken into account when choosing the right FS template to use for this kind of host. Also, as the default FS exclusions contains the regex '^/dev/?', all AIX FS are excluded (the device name being something like "/dev/…") unless you use the -X option to overload the exclusion patterns.

EOF
}

get_sysdescr() {
    $SNMPGET -Oqv "$1" 1.3.6.1.2.1.1.1.0 2>/dev/null | tr -d '"'
}

get_filesystems() {
    # First and second sed expressions needed to support FreeBSD, which give extra-info on mountpoints (type & dev), we need this transformations to discard those info later.
    # Third sed expresion needed to support Windows which give extra-info (serial number). We just drop this serial so size is the second field, after the drive letter.
    $SNMPDF "$1" | grep -E '^(/|[A-Z]:)' | sed -e 's/, /,/mg' -e 's/: /:/mg' -e 's/Label: Serial Number [1-9a-f]*//gm'
}

get_fqdn() {
    getent hosts $1 |awk '{print $2}' 
}

clapi_add_fs() {
    for re in $FS_EXCLUSIONS; do
        [[ "$2" =~ $re ]] && {
                $VERBOSE && echo "Excluding FS \"$2\" for host $FQDN" >&2
                return 0
            }
    done
    echo "SERVICE:ADD:$1:Filesystem $2:$FSTPL" >> "${DIR_TMP}/${FQDN}.clapi"
    wthres=$(echo "$3 * $FS_WARNTHRESHOLD / 100" | bc)
    [ $wthres -gt $(($FS_MAXWARNTHRESHOLD * 1024)) ] && wthres=$(($FS_MAXWARNTHRESHOLD * 1024))
    cthres=$(echo "$3 * $FS_CRITTHRESHOLD / 100" | bc)
    [ $cthres -gt $(($FS_MAXCRITTHRESHOLD * 1024)) ] && cthres=$(($FS_MAXCRITTHRESHOLD * 1024))
    echo "SERVICE:setparam:Filesystem $2:check_command_arguments:!$2!$wthres!$cthres" >> "${DIR_TMP}/${FQDN}.clapi"
}

gen_filesystems() {
    while IFS='\n' read fs; do
        while read mp size used free; do
            mp=${mp%%,*} # Discard FReeBSD extra-info
            free=${free%% *} # Discard unused info (% free)
            $VERBOSE && echo "$FQDN:$FSTPL:$mp|$size|$used|$free" >&2
            clapi_add_fs $FQDN $mp $size $used $free
        done < <(echo "$fs")
    done < <(echo "$(get_filesystems $1)")
}

get_templating() {
    while IFS='\n' read template; do
        while IFS=';' read regex htpls hgs stpl; do
            [[ "$1" =~ $regex ]] && { echo $htpls $hgs $stpl; return 0; }
        done < <(echo "$template")
    done < <(grep -vE '^$|^\s*#' "$FILE_TEMPLATING")
}

clapi_add_host() {
    echo "HOST:ADD:$2:$2:$1:$3:$POLLER_NAME:$4"
    echo "HOST:setparam:$2:snmp_community:$SNMP_COMMUNITY"
}

clapi_up_host() {
    echo "HOST:setparam:$2:address:$1"
    echo "HOST:setparam:$2:snmp_community:$SNMP_COMMUNITY"
    echo "HOST:sethostgroup:$2:$4"
    echo "HOST:settemplate:$2:$3"
}


read_templating() {
    SYSDESCR="$(get_sysdescr $1)"
    $VERBOSE && echo "$FQDN: Description=$SYSDESCR" >&2
    templating="$(get_templating "$SYSDESCR")"
    read HTPL HG FSTPL < <(echo "$templating")
    $VERBOSE && echo "Template(s) for $FQDN: $HTPL" >&2
    $VERBOSE && echo "Group(s) for $FQDN: $HG" >&2
    $VERBOSE && echo "FS template for $FQDN: $FSTPL" >&2
}

add_host() {
    $VERBOSE && echo "Scanning address $1…" >&2
    ping -n -c1 $1 &>/dev/null && FQDN=$(get_fqdn $1) || { $VERBOSE && echo "Address $1 is down…" >&2; }
    [ "$FQDN" ] && {
        echo "Adding host $FQDN…" >&2
        read_templating $1
        clapi_add_host $1 $FQDN $HTPL $HG > "${DIR_TMP}/${FQDN}.clapi"
        [ $FSTPL ] && $GEN_FS && gen_filesystems $FQDN $FSTPL || { $VERBOSE && echo "Host $FQDN has no FS service template associated…" >&2; }
    }
}

up_host() {
    $VERBOSE && echo "Scanning address $1…" >&2
    ping -n -c1 $1 &>/dev/null && FQDN=$(get_fqdn $1) || { $VERBOSE && echo "Address $1 is down…" >&2; }
    [ "$FQDN" ] && {
        echo "Updating host $FQDN…" >&2
        read_templating $1
        clapi_up_host $1 $FQDN $HTPL $HG > "${DIR_TMP}/${FQDN}.clapi"
        [ $FSTPL ] && $GEN_FS && gen_filesystems $FQDN $FSTPL
    }
}

gen_hosts() {
    for address in $(eval echo ${1//\*/{0..255\}}); do
        add_host $address &
    done
}

up_hosts() {
    for address in $(eval echo ${1//\*/{0..255\}}); do
        up_host $address &
    done
}


[ -d "$DIR_TMP" ] || mkdir "$DIR_TMP"

GEN_HOSTS='false'
UP_HOSTS='false'
GEN_FS='false'

while getopts "hvFH:U:c:A:f:p:W:C:t:T:X:" opt; do
    case $opt in
        h)
            show_help
            exit 0
        ;;
        v)
            VERBOSE='true'
        ;;
        W)
            FS_WARNTHRESHOLD="$OPTARG"
        ;;
        C)
            FS_CRITTHRESHOLD="$OPTARG"
        ;;
        t)
            FS_MAXWARNTHRESHOLD="$OPTARG"
        ;;
        T)
            FS_MAXCRITTHRESHOLD="$OPTARG"
        ;;
        f)
            FILE_TEMPLATING="$OPTARG"
        ;;
        c)
            SNMP_COMMUNITY="$OPTARG"
        ;;
        p)
            POLLER_NAME="$OPTARG"
        ;;
        F)
            GEN_FS='true'
        ;;
        H)
            GEN_HOSTS='true'
            ARGS="$OPTARG"
        ;;
        U)
            UP_HOSTS='true'
            ARGS="$OPTARG"
        ;;
        X)
            FS_EXCLUSIONS="$OPTARG"
        ;;
        A)
            GEN_HOSTS='true'
            GEN_FS='true'
            ARGS="$OPTARG"
        ;;
    esac
done

$VERBOSE && echo "VERBOSE=$VERBOSE" >&2
$VERBOSE && echo "GEN_FS=$GEN_FS" >&2
$VERBOSE && echo "POLLER_NAME=$POLLER_NAME" >&2
$VERBOSE && echo "SNMP_COMMUNITY=$SNMP_COMMUNITY" >&2
{ $VERBOSE && $GEN_FS ; } && echo "FS_EXCLUSIONS=$FS_EXCLUSIONS" >&2

[ -f "$FILE_TEMPLATING" ] || { echo -e "File \"$FILE_TEMPLATING\" not found. Exiting.\n"; exit 98; }

SNMPGET="snmpget -v$SNMP_VERSION -c$SNMP_COMMUNITY"
SNMPDF="snmpdf -v$SNMP_VERSION -c$SNMP_COMMUNITY"

if $GEN_HOSTS; then
    gen_hosts $ARGS
elif $UP_HOSTS; then
    up_hosts $ARGS
fi
wait

cat "${DIR_TMP}"/* 2>/dev/null


[ -d "$DIR_TMP" ]  && rm -rf  "$DIR_TMP"
[ -f "$FILE_TMP" ] && rm "$FILE_TMP"
exit 0
