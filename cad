#!/usr/bin/env bash

# Check if we have all that we need, else exit 99.
TOOLS='snmpdf snmpget ping awk getent tr basename'
for tool in $TOOLS; do
    [ -x "$(which $tool)" ] || { echo -e "\n$tool not found. Exiting.\n"; exit 99; }
done

# Set some default parameters
FS_WARNTHRESHOLD=5         # Warning threshold, free space in percent
FS_CRITTHRESHOLD=3         # Critical threshold, free space in percent
FS_MAXWARNTHRESHOLD=512    # Maximum threshold for warning, free space in MiB
FS_MAXCRITTHRESHOLD=1024   # Maximum threshold for critical, free space in MiB

FILE_TEMPLATING='./templating'
FILE_LOG='./cad.log'
FILE_TMP="/tmp/cad-$$.tmp"
DIR_TMP="/tmp/cad-$$"
VERBOSE='false'

SNMP_COMMUNITY='public'
SNMP_VERSION='2c'

POLLER_NAME='Poller1'

# Show help
show_help() {
cat <<EOF

Usage: $0 [-h] [-v] [-H <network>] [-F] [-c <SNMP community>]

    -h               Show this help and exit
    -v               Be verbose
    -H <network>     Generate CLAPI file for hosts in this network (hosts addition)
    -U <network>     Generate CLAPI file for hosts in this network (hosts update)
    -F               Add CLAPI for filesystems for every hosts
    -A <network>     Generate all. Equivalent to: -H <network> -F
    -c <community>   SNMP Community. Used for SNMP requests and enforced on created hosts

EOF
}

SNMPGET="snmpget -v$SNMP_VERSION -c$SNMP_COMMUNITY"

get_sysdescr() {
    $SNMPGET -Oqv "$1" 1.3.6.1.2.1.1.1.0 2>/dev/null | tr -d '"'
}

get_fqdn() {
    getent hosts $1 |awk '{print $2}'
}

get_templating() {
    while IFS='\n' read template; do
        while IFS=';' read regex htpls hgs stpl; do
            [[ "$1" =~ $regex ]] && { echo $htpls $hgs $stpl; return 0; }
        done < <(echo $template)
    done < <(grep -vE '^$|^\s*#' "$FILE_TEMPLATING")
}

clapi_add_host() {
    echo "HOST:ADD:$2:$2:$1:$3:$POLLER_NAME:$4"
    echo "HOST:setparam:$2:snmp_community:$SNMP_COMMUNITY"
}

clapi_up_host() {
    echo "HOST:setparam:$2:address:$1"
    echo "HOST:setparam:$2:snmp_community:$SNMP_COMMUNITY"
    echo "HOST:sethostgroup:$2:$4"
    echo "HOST:settemplate:$2:$3"
}


read_templating() {
    SYSDESCR="$(get_sysdescr $1)"
    templating="$(get_templating $SYSDESCR)"
    read HTPL HG < <(echo $templating)
    $VERBOSE && echo "Template(s) for $FQDN: $HTPL" >&2
    $VERBOSE && echo "Group(s) for $FQDN: $HG" >&2
}

add_host() {
    $VERBOSE && echo "Scanning address $1…" >&2
    ping -4 -n -c1 $1 &>/dev/null && FQDN=$(get_fqdn $1) || { $VERBOSE && echo "Address $1 is down…" >&2; }
    [ "$FQDN" ] && {
        echo "Adding host $FQDN…" >&2
        read_templating $1
        clapi_add_host $1 $FQDN $HTPL $HG > "${DIR_TMP}/${FQDN}.clapi"
    }
}

up_host() {
    $VERBOSE && echo "Scanning address $1…" >&2
    ping -4 -n -c1 $1 &>/dev/null && FQDN=$(get_fqdn $1) || { $VERBOSE && echo "Address $1 is down…" >&2; }
    [ "$FQDN" ] && {
        echo "Updating host $FQDN…" >&2
        read_templating $1
        clapi_up_host $1 $FQDN $HTPL $HG > "${DIR_TMP}/${FQDN}.clapi"
    }
}

gen_hosts() {
    for address in $(eval echo ${1//\*/{0..255\}}); do
        add_host $address &
    done
}

up_hosts() {
    for address in $(eval echo ${1//\*/{0..255\}}); do
        up_host $address &
    done
}

gen_filesystems() {
    ls "$DIR_TMP"/* &>/dev/null || { echo "No host to create filesystems for. Use one of -H or -U option.";  return 0; }
    for file in "${DIR_TMP}"/*; do
    bn=$(basename $file)
    hn=${bn%.*}
    snmpdf -c$SNMP_COMMUNITY -v$SNMP_VERSION $hn | grep -E '^/'
    done
}

[ -d "$DIR_TMP" ] || mkdir "$DIR_TMP"

GEN_HOSTS='false'
UP_HOSTS='false'
GEN_FS='false'

while getopts "hvFH:U:A:f:p:" opt; do
    case $opt in
        h)
            show_help
            exit 0
        ;;
        v)
            VERBOSE='true'
        ;;
        f)
            FILE_TEMPLATING="$OPTARG"
        ;;
        p)
            POLLER_NAME="$OPTARG"
        ;;
        F)
            GEN_FS='true'
        ;;
        H)
            GEN_HOSTS='true'
            ARGS="$OPTARG"
        ;;
        U)
            UP_HOSTS='true'
            ARGS="$OPTARG"
        ;;
        A)
            GEN_HOSTS='true'
            GEN_FS='true'
            ARGS="$OPTARG"
        ;;
    esac
done

$VERBOSE && echo "VERBOSE=$VERBOSE" >&2

[ -f "$FILE_TEMPLATING" ] || { echo -e "File \"$FILE_TEMPLATING\" not found. Exiting.\n"; exit 98; }

if $GEN_HOSTS; then
    gen_hosts $ARGS
elif $UP_HOSTS; then
    up_hosts $ARGS
fi
wait
$GEN_FS && gen_filesystems $ARGS
wait
cat "${DIR_TMP}"/* 2>/dev/null


[ -d "$DIR_TMP" ]  && rm -rf  "$DIR_TMP"
[ -f "$FILE_TMP" ] && rm "$FILE_TMP"
exit 0
